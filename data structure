#include <stdio.h>
#include <string.h>
#define MAX_LEN  100
#define STACK_LEN  200

char source[ MAX_LEN ] ,       /* 原字符串 */
        target[ MAX_LEN ] ,        /* 目标字符串 */
        stack[ MAX_LEN ] ;         /* 栈 */
int state[ 2*MAX_LEN ] ;         /* 记录每一阶段的状态，（路径OR解），状态1表示压栈，-1表示弹栈 */
int len ;                                 /* 字符串长度 */
int flag = 0 ;                          /* 标记是否有解 */

int print( int depth )
{
    int i = 0 ;
    while ( i < depth -1 )           /* 不是i < depth 因为最后一个无空格 */
    {
        if ( state[ i ] == 1 )           /* 表示压栈 */
            putchar ( 'i' );
        if ( state[ i ] == -1 )         /* 表示弹栈 */
            putchar ( 'o' );
        if ( i < depth-1 )
            putchar ( ' ' ) ;             /* 并不是所有的符号后面都是空格 */
        i++ ;
    }
    printf("\n");
    return 0;
}

int dfs( int depth , int npush , int npop )   /* depth : 深搜的深度 , npush : 压栈数 , npop : 弹栈数 */
{
    if ( npush == len && npop == len )      /* 表示求解完成 */
    {
        flag = 1 ;                                           /* 修改为有解标志 */
        print( depth );                                    /* 输出该解 */
        return 0;
    }
    if ( npush < len )
    {
        state[ depth-1 ] = 1;                          /* 记录状态， 1表示入栈 */
        stack[ stack[ 0 ] ] = source[ npush ] ;  /* 入栈， 将npush位置的字符压入栈顶 */
        stack[ 0 ] ++ ;                                    /* 改变栈顶指针， 指针往后移 */
        dfs( depth+1 , npush+1 , npop ) ;      /* 继续进行压栈判断 */
        stack[ 0 ] -- ;                                     /* 回溯要恢复栈的状态 （因为不是每一次调用都复制一次栈，那样开销大 */
    }
    if ( stack[ 0 ] > 0 && target[ npop ] == stack[ stack[ 0 ] -1 ] )   /* 判断是否可以弹栈，不能就回溯 */
    {
        state[ depth-1 ] = -1 ;                       /* 记录状态， -1表示弹栈 */
        int temp = stack[ stack[ 0 ] -1 ] ;       /* 因为要弹栈， 所以要保存栈原来的状态， temp记录栈顶的位置 */
        stack[ 0 ] -- ;                                    /* 改变栈顶指针 */
        dfs ( depth+1 , npush , npop+1 );     /* 继续进行弹栈判断 */
        stack[ stack[ 0 ] ] = temp ;                /* 不能弹栈就回溯， 恢复栈一开始的状态 */
        stack[ 0 ] ++ ;                                  /* 依然恢复栈顶指针 */
    }
    return 0 ;
}

int main ( )
{
    stack[ 0 ] = 1;                   /* stack[ 0 ] 表示栈顶的下一位，初始化为1 */
    while( ( scanf("%s %s", source , target ) ) != EOF )
    {
        puts( "[" );
        flag = 0 ;                     /* 初始化标记 */
        len = strlen( source ) ;
        if ( len == strlen ( target ) )
            dfs( 1, 0, 0 ) ;
        puts( "]" );
    }
    return 0;
}
